{
  "QuickSort": {
    "JavaScript": [
      "function quickSort(arr, low, high) {",
      "    if (low < high) {",
      "        let pi = partition(arr, low, high);",
      "",
      "        quickSort(arr, low, pi - 1);",
      "        quickSort(arr, pi + 1, high);",
      "    }",
      "}",
      "",
      "function partition(arr, low, high) {",
      "    let pivot = arr[high];",
      "    let i = (low - 1);",
      "    for (let j = low; j <= high - 1; j++) {",
      "        if (arr[j] < pivot) {",
      "            i++;",
      "            [arr[i], arr[j]] = [arr[j], arr[i]];",
      "        }",
      "    }",
      "    [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];",
      "    return (i + 1);",
      "}"
    ],
    "C": [
      "#include <stdio.h>",
      "",
      "void quickSort(int arr[], int low, int high) {",
      "    if (low < high) {",
      "        int pi = partition(arr, low, high);",
      "",
      "        quickSort(arr, low, pi - 1);",
      "        quickSort(arr, pi + 1, high);",
      "    }",
      "}",
      "",
      "int partition(int arr[], int low, int high) {",
      "    int pivot = arr[high];",
      "    int i = (low - 1);",
      "    for (int j = low; j <= high - 1; j++) {",
      "        if (arr[j] < pivot) {",
      "            i++;",
      "            int temp = arr[i];",
      "            arr[i] = arr[j];",
      "            arr[j] = temp;",
      "        }",
      "    }",
      "    int temp = arr[i + 1];",
      "    arr[i + 1] = arr[high];",
      "    arr[high] = temp;",
      "    return (i + 1);",
      "}"
    ],
    "C++": [
      "#include <iostream>",
      "using namespace std;",
      "",
      "int partition(int arr[], int low, int high) {",
      "    int pivot = arr[high];",
      "    int i = (low - 1);",
      "    for (int j = low; j <= high - 1; j++) {",
      "        if (arr[j] < pivot) {",
      "            i++;",
      "            int temp = arr[i];",
      "            arr[i] = arr[j];",
      "            arr[j] = temp;",
      "        }",
      "    }",
      "    int temp = arr[i + 1];",
      "    arr[i + 1] = arr[high];",
      "    arr[high] = temp;",
      "    return (i + 1);",
      "}",
      "",
      "void quickSort(int arr[], int low, int high) {",
      "    if (low < high) {",
      "        int pi = partition(arr, low, high);",
      "",
      "        quickSort(arr, low, pi - 1);",
      "        quickSort(arr, pi + 1, high);",
      "    }",
      "}"
    ],
    "Java": [
      "#include <stdio.h>",
      "",
      "public class QuickSort {",
      "    public static void quickSort(int arr[], int low, int high) {",
      "        if (low < high) {",
      "            int pi = partition(arr, low, high);",
      "",
      "            quickSort(arr, low, pi - 1);",
      "            quickSort(arr, pi + 1, high);",
      "        }",
      "    }",
      "",
      "    public static int partition(int arr[], int low, int high) {",
      "        int pivot = arr[high];",
      "        int i = (low - 1);",
      "        for (int j = low; j <= high - 1; j++) {",
      "            if (arr[j] < pivot) {",
      "                i++;",
      "                int temp = arr[i];",
      "                arr[i] = arr[j];",
      "                arr[j] = temp;",
      "            }",
      "        }",
      "        int temp = arr[i + 1];",
      "        arr[i + 1] = arr[high];",
      "        arr[high] = temp;",
      "        return (i + 1);",
      "    }",
      "}"
    ],
    "Python": [
      "#include <stdio.h>",
      "",
      "def quickSort(arr, low, high):",
      "    if low < high:",
      "        pi = partition(arr, low, high)",
      "",
      "        quickSort(arr, low, pi - 1)",
      "        quickSort(arr, pi + 1, high)",
      "",
      "def partition(arr, low, high):",
      "    pivot = arr[high]",
      "    i = low - 1",
      "    for j in range(low, high):",
      "        if arr[j] < pivot:",
      "            i += 1",
      "            arr[i], arr[j] = arr[j], arr[i]",
      "    arr[i + 1], arr[high] = arr[high], arr[i + 1]",
      "    return i + 1"
    ],
    "C#": [
      "#include <stdio.h>",
      "",
      "using System;",
      "",
      "class Program {",
      "    static void Main(string[] args) {",
      "        int[] arr = { 10, 7, 8, 9, 1, 5 };",
      "        int n = arr.Length;",
      "        QuickSort(arr, 0, n - 1);",
      "        Console.WriteLine(\"Sorted array:\");",
      "        for (int i = 0; i < n; ++i)",
      "            Console.Write(arr[i] + \" \");",
      "        Console.ReadKey();",
      "    }",
      "",
      "    static void QuickSort(int[] arr, int low, int high) {",
      "        if (low < high) {",
      "            int pi = Partition(arr, low, high);",
      "            QuickSort(arr, low, pi - 1);",
      "            QuickSort(arr, pi + 1, high);",
      "        }",
      "    }",
      "",
      "    static int Partition(int[] arr, int low, int high) {",
      "        int pivot = arr[high];",
      "        int i = low - 1;",
      "        for (int j = low; j <= high - 1; j++) {",
      "            if (arr[j] < pivot) {",
      "                i++;",
      "                int temp = arr[i];",
      "                arr[i] = arr[j];",
      "                arr[j] = temp;",
      "            }",
      "        }",
      "        int temp1 = arr[i + 1];",
      "        arr[i + 1] = arr[high];",
      "        arr[high] = temp1;",
      "        return (i + 1);",
      "    }",
      "}"
    ],
    "Rust": [
      "#include <stdio.h>",
      "",
      "fn partition(arr: &mut [i32], low: usize, high: usize) -> usize {",
      "    let pivot = arr[high];",
      "    let mut i = low as isize - 1;",
      "    for j in low..high {",
      "        if arr[j] < pivot {",
      "            i += 1;",
      "            arr.swap(i as usize, j);",
      "        }",
      "    }",
      "    arr.swap((i + 1) as usize, high);",
      "    return (i + 1) as usize;",
      "}",
      "",
      "fn quick_sort(arr: &mut [i32], low: usize, high: usize) {",
      "    if low < high {",
      "        let pi = partition(arr, low, high);",
      "        quick_sort(arr, low, pi - 1);",
      "        quick_sort(arr, pi + 1, high);",
      "    }",
      "}"
    ]
  },
  "MergeSort": {
    "JavaScript": [
      "function mergeSort(arr) {",
      "    if (arr.length <= 1) return arr;",
      "    let mid = Math.floor(arr.length / 2);",
      "    let left = mergeSort(arr.slice(0, mid));",
      "    let right = mergeSort(arr.slice(mid));",
      "    return merge(left, right);",
      "}",
      "function merge(left, right) {",
      "    let result = [], leftIndex = 0, rightIndex = 0;",
      "    while (leftIndex < left.length && rightIndex < right.length) {",
      "        if (left[leftIndex] < right[rightIndex]) {",
      "            result.push(left[leftIndex]);",
      "            leftIndex++;",
      "        } else {",
      "            result.push(right[rightIndex]);",
      "            rightIndex++;",
      "        }",
      "    }",
      "    return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));",
      "}"
    ],
    "C": [
      "#include <stdio.h>",
      "",
      "void merge(int arr[], int l, int m, int r) {",
      "    int i, j, k;",
      "    int n1 = m - l + 1;",
      "    int n2 = r - m;",
      "",
      "    int L[n1], R[n2];",
      "",
      "    for (i = 0; i < n1; i++)",
      "        L[i] = arr[l + i];",
      "    for (j = 0; j < n2; j++)",
      "        R[j] = arr[m + 1 + j];",
      "",
      "    i = 0;",
      "    j = 0;",
      "    k = l;",
      "    while (i < n1 && j < n2) {",
      "        if (L[i] <= R[j]) {",
      "            arr[k] = L[i];",
      "            i++;",
      "        } else {",
      "            arr[k] = R[j];",
      "            j++;",
      "        }",
      "        k++;",
      "    }",
      "",
      "    while (i < n1) {",
      "        arr[k] = L[i];",
      "        i++;",
      "        k++;",
      "    }",
      "",
      "    while (j < n2) {",
      "        arr[k] = R[j];",
      "        j++;",
      "        k++;",
      "    }",
      "}",
      "",
      "void mergeSort(int arr[], int l, int r) {",
      "    if (l < r) {",
      "        int m = l + (r - l) / 2;",
      "        mergeSort(arr, l, m);",
      "        mergeSort(arr, m + 1, r);",
      "        merge(arr, l, m, r);",
      "    }",
      "}"
    ],
    "C++": [
      "#include <iostream>",
      "using namespace std;",
      "",
      "void merge(int arr[], int l, int m, int r) {",
      "    int n1 = m - l + 1;",
      "    int n2 = r - m;",
      "    int L[n1], R[n2];",
      "    for (int i = 0; i < n1; i++)",
      "        L[i] = arr[l + i];",
      "    for (int j = 0; j < n2; j++)",
      "        R[j] = arr[m + 1 + j];",
      "    int i = 0, j = 0, k = l;",
      "    while (i < n1 && j < n2) {",
      "        if (L[i] <= R[j]) {",
      "            arr[k] = L[i];",
      "            i++;",
      "        } else {",
      "            arr[k] = R[j];",
      "            j++;",
      "        }",
      "        k++;",
      "    }",
      "    while (i < n1) {",
      "        arr[k] = L[i];",
      "        i++;",
      "        k++;",
      "    }",
      "    while (j < n2) {",
      "        arr[k] = R[j];",
      "        j++;",
      "        k++;",
      "    }",
      "}",
      "",
      "void mergeSort(int arr[], int l, int r) {",
      "    if (l < r) {",
      "        int m = l + (r - l) / 2;",
      "        mergeSort(arr, l, m);",
      "        mergeSort(arr, m + 1, r);",
      "        merge(arr, l, m, r);",
      "    }",
      "}"
    ],
    "Java": [
      "public class MergeSort {",
      "    public static void merge(int arr[], int l, int m, int r) {",
      "        int n1 = m - l + 1;",
      "        int n2 = r - m;",
      "        int L[] = new int [n1];",
      "        int R[] = new int [n2];",
      "        for (int i=0; i<n1; ++i)",
      "            L[i] = arr[l + i];",
      "        for (int j=0; j<n2; ++j)",
      "            R[j] = arr[m + 1+ j];",
      "        int i = 0, j = 0;",
      "        int k = l;",
      "        while (i < n1 && j < n2) {",
      "            if (L[i] <= R[j]) {",
      "                arr[k] = L[i];",
      "                i++;",
      "            } else {",
      "                arr[k] = R[j];",
      "                j++;",
      "            }",
      "            k++;",
      "        }",
      "        while (i < n1) {",
      "            arr[k] = L[i];",
      "            i++;",
      "            k++;",
      "        }",
      "        while (j < n2) {",
      "            arr[k] = R[j];",
      "            j++;",
      "            k++;",
      "        }",
      "    }",
      "",
      "    public static void sort(int arr[], int l, int r) {",
      "        if (l < r) {",
      "            int m = (l+r)/2;",
      "            sort(arr, l, m);",
      "            sort(arr , m+1, r);",
      "            merge(arr, l, m, r);",
      "        }",
      "    }",
      "}"
    ],
    "Python": [
      "def merge(arr, l, m, r):",
      "    n1 = m - l + 1",
      "    n2 = r - m",
      "    L = [0] * n1",
      "    R = [0] * n2",
      "    for i in range(n1):",
      "        L[i] = arr[l + i]",
      "    for j in range(n2):",
      "        R[j] = arr[m + 1 + j]",
      "    i = 0",
      "    j = 0",
      "    k = l",
      "    while i < n1 and j < n2:",
      "        if L[i] <= R[j]:",
      "            arr[k] = L[i]",
      "            i += 1",
      "        else:",
      "            arr[k] = R[j]",
      "            j += 1",
      "        k += 1",
      "    while i < n1:",
      "        arr[k] = L[i]",
      "        i += 1",
      "        k += 1",
      "    while j < n2:",
      "        arr[k] = R[j]",
      "        j += 1",
      "        k += 1",
      "",
      "def mergeSort(arr, l, r):",
      "    if l < r:",
      "        m = (l + r) // 2",
      "        mergeSort(arr, l, m)",
      "        mergeSort(arr, m + 1, r)",
      "        merge(arr, l, m, r)"
    ],
    "C#": [
      "using System;",
      "",
      "class MergeSort {",
      "    public static void Merge(int[] arr, int l, int m, int r) {",
      "        int n1 = m - l + 1;",
      "        int n2 = r - m;",
      "        int[] L = new int[n1];",
      "        int[] R = new int[n2];",
      "        for (int i = 0; i < n1; ++i)",
      "            L[i] = arr[l + i];",
      "        for (int j = 0; j < n2; ++j)",
      "            R[j] = arr[m + 1 + j];",
      "        int i = 0, j = 0;",
      "        int k = l;",
      "        while (i < n1 && j < n2) {",
      "            if (L[i] <= R[j]) {",
      "                arr[k] = L[i];",
      "                i++;",
      "            } else {",
      "                arr[k] = R[j];",
      "                j++;",
      "            }",
      "            k++;",
      "        }",
      "        while (i < n1) {",
      "            arr[k] = L[i];",
      "            i++;",
      "            k++;",
      "        }",
      "        while (j < n2) {",
      "            arr[k] = R[j];",
      "            j++;",
      "            k++;",
      "        }",
      "    }",
      "",
      "    public static void Sort(int[] arr, int l, int r) {",
      "        if (l < r) {",
      "            int m = l + (r - l) / 2;",
      "            Sort(arr, l, m);",
      "            Sort(arr, m + 1, r);",
      "            Merge(arr, l, m, r);",
      "        }",
      "    }",
      "}"
    ],
    "Rust": [
      "fn merge(arr: &mut [i32], l: usize, m: usize, r: usize) {",
      "    let n1 = m - l + 1;",
      "    let n2 = r - m;",
      "    let mut L = vec![0; n1];",
      "    let mut R = vec![0; n2];",
      "    for i in 0..n1 {",
      "        L[i] = arr[l + i];",
      "    }",
      "    for j in 0..n2 {",
      "        R[j] = arr[m + 1 + j];",
      "    }",
      "    let mut i = 0;",
      "    let mut j = 0;",
      "    let mut k = l;",
      "    while i < n1 && j < n2 {",
      "        if L[i] <= R[j] {",
      "            arr[k] = L[i];",
      "            i += 1;",
      "        } else {",
      "            arr[k] = R[j];",
      "            j += 1;",
      "        }",
      "        k += 1;",
      "    }",
      "    while i < n1 {",
      "        arr[k] = L[i];",
      "        i += 1;",
      "        k += 1;",
      "    }",
      "    while j < n2 {",
      "        arr[k] = R[j];",
      "        j += 1;",
      "        k += 1;",
      "    }",
      "}",
      "",
      "fn merge_sort(arr: &mut [i32], l: usize, r: usize) {",
      "    if l < r {",
      "        let m = l + (r - l) / 2;",
      "        merge_sort(arr, l, m);",
      "        merge_sort(arr, m + 1, r);",
      "        merge(arr, l, m, r);",
      "    }",
      "}"
    ]
  },
  "HeapSort": {
    "Javascript": [
      "function heapify(arr, n, i) {",
      "    let largest = i;",
      "    let l = 2 * i + 1;",
      "    let r = 2 * i + 2;",
      "    if (l < n && arr[l] > arr[largest])",
      "        largest = l;",
      "    if (r < n && arr[r] > arr[largest])",
      "        largest = r;",
      "    if (largest != i) {",
      "        let temp = arr[i];",
      "        arr[i] = arr[largest];",
      "        arr[largest] = temp;",
      "        heapify(arr, n, largest);",
      "    }",
      "}",
      "",
      "function heapSort(arr) {",
      "    let n = arr.length;",
      "    for (let i = Math.floor(n / 2) - 1; i >= 0; i--)",
      "        heapify(arr, n, i);",
      "    for (let i = n - 1; i > 0; i--) {",
      "        let temp = arr[0];",
      "        arr[0] = arr[i];",
      "        arr[i] = temp;",
      "        heapify(arr, i, 0);",
      "    }",
      "    return arr;",
      "}"
    ],
    "C": [
      "#include <stdio.h>",
      "",
      "void heapify(int arr[], int n, int i) {",
      "    int largest = i;",
      "    int l = 2 * i + 1;",
      "    int r = 2 * i + 2;",
      "    if (l < n && arr[l] > arr[largest])",
      "        largest = l;",
      "    if (r < n && arr[r] > arr[largest])",
      "        largest = r;",
      "    if (largest != i) {",
      "        int temp = arr[i];",
      "        arr[i] = arr[largest];",
      "        arr[largest] = temp;",
      "        heapify(arr, n, largest);",
      "    }",
      "}",
      "",
      "void heapSort(int arr[], int n) {",
      "    for (int i = n / 2 - 1; i >= 0; i--)",
      "        heapify(arr, n, i);",
      "    for (int i = n - 1; i > 0; i--) {",
      "        int temp = arr[0];",
      "        arr[0] = arr[i];",
      "        arr[i] = temp;",
      "        heapify(arr, i, 0);",
      "    }",
      "}"
    ],
    "C++": [
      "#include <iostream>",
      "using namespace std;",
      "",
      "void heapify(int arr[], int n, int i) {",
      "    int largest = i;",
      "    int l = 2 * i + 1;",
      "    int r = 2 * i + 2;",
      "    if (l < n && arr[l] > arr[largest])",
      "        largest = l;",
      "    if (r < n && arr[r] > arr[largest])",
      "        largest = r;",
      "    if (largest != i) {",
      "        swap(arr[i], arr[largest]);",
      "        heapify(arr, n, largest);",
      "    }",
      "}",
      "",
      "void heapSort(int arr[], int n) {",
      "    for (int i = n / 2 - 1; i >= 0; i--)",
      "        heapify(arr, n, i);",
      "    for (int i = n - 1; i > 0; i--) {",
      "        swap(arr[0], arr[i]);",
      "        heapify(arr, i, 0);",
      "    }",
      "}"
    ],
    "Java": [
      "public class HeapSort {",
      "    public void heapify(int arr[], int n, int i) {",
      "        int largest = i;",
      "        int l = 2 * i + 1;",
      "        int r = 2 * i + 2;",
      "        if (l < n && arr[l] > arr[largest])",
      "            largest = l;",
      "        if (r < n && arr[r] > arr[largest])",
      "            largest = r;",
      "        if (largest != i) {",
      "            int temp = arr[i];",
      "            arr[i] = arr[largest];",
      "            arr[largest] = temp;",
      "            heapify(arr, n, largest);",
      "        }",
      "    }",
      "",
      "    public void heapSort(int arr[]) {",
      "        int n = arr.length;",
      "        for (int i = n / 2 - 1; i >= 0; i--)",
      "            heapify(arr, n, i);",
      "        for (int i = n - 1; i > 0; i--) {",
      "            int temp = arr[0];",
      "            arr[0] = arr[i];",
      "            arr[i] = temp;",
      "            heapify(arr, i, 0);",
      "        }",
      "    }",
      "}"
    ],
    "Python": [
      "def heapify(arr, n, i):",
      "    largest = i",
      "    l = 2 * i + 1",
      "    r = 2 * i + 2",
      "    if l < n and arr[l] > arr[largest]:",
      "        largest = l",
      "    if r < n and arr[r] > arr[largest]:",
      "        largest = r",
      "    if largest != i:",
      "        arr[i], arr[largest] = arr[largest], arr[i]",
      "        heapify(arr, n, largest)",
      "",
      "def heap_sort(arr):",
      "    n = len(arr)",
      "    for i in range(n // 2 - 1, -1, -1):",
      "        heapify(arr, n, i)",
      "    for i in range(n - 1, 0, -1):",
      "        arr[0], arr[i] = arr[i], arr[0]",
      "        heapify(arr, i, 0)"
    ],
    "C#": [
      "using System;",
      "",
      "class HeapSort {",
      "    public void Heapify(int[] arr, int n, int i) {",
      "        int largest = i;",
      "        int l = 2 * i + 1;",
      "        int r = 2 * i + 2;",
      "        if (l < n && arr[l] > arr[largest])",
      "            largest = l;",
      "        if (r < n && arr[r] > arr[largest])",
      "            largest = r;",
      "        if (largest != i) {",
      "            int temp = arr[i];",
      "            arr[i] = arr[largest];",
      "            arr[largest] = temp;",
      "            Heapify(arr, n, largest);",
      "        }",
      "    }",
      "",
      "    public void HeapSort(int[] arr) {",
      "        int n = arr.Length;",
      "        for (int i = n / 2 - 1; i >= 0; i--)",
      "            Heapify(arr, n, i);",
      "        for (int i = n - 1; i > 0; i--) {",
      "            int temp = arr[0];",
      "            arr[0] = arr[i];",
      "            arr[i] = temp;",
      "            Heapify(arr, i, 0);",
      "        }",
      "    }",
      "}"
    ],
    "Rust": [
      "fn heapify(arr: &mut [i32], n: usize, i: usize) {",
      "    let mut largest = i;",
      "    let l = 2 * i + 1;",
      "    let r = 2 * i + 2;",
      "    if l < n && arr[l] > arr[largest] {",
      "        largest = l;",
      "    }",
      "    if r < n && arr[r] > arr[largest] {",
      "        largest = r;",
      "    }",
      "    if largest != i {",
      "        arr.swap(i, largest);",
      "        heapify(arr, n, largest);",
      "    }",
      "}",
      "",
      "fn heap_sort(arr: &mut [i32]) {",
      "    let n = arr.len();",
      "    for i in (0..n / 2).rev() {",
      "        heapify(arr, n, i);",
      "    }",
      "    for i in (1..n).rev() {",
      "        arr.swap(0, i);",
      "        heapify(arr, i, 0);",
      "    }",
      "}"
    ]
  },
  "BubbleSort": {
    "JavaScript": [
      "function bubbleSort(arr) {",
      "    let n = arr.length;",
      "    for (let i = 0; i < n-1; i++) {",
      "        for (let j = 0; j < n-i-1; j++) {",
      "            if (arr[j] > arr[j+1]) {",
      "                let temp = arr[j];",
      "                arr[j] = arr[j+1];",
      "                arr[j+1] = temp;",
      "            }",
      "        }",
      "    }",
      "    return arr;",
      "}"
    ],
    "C": [
      "#include <stdio.h>",
      "",
      "void bubbleSort(int arr[], int n) {",
      "    int i, j;",
      "    for (i = 0; i < n-1; i++)",
      "        for (j = 0; j < n-i-1; j++)",
      "            if (arr[j] > arr[j+1]) {",
      "                int temp = arr[j];",
      "                arr[j] = arr[j+1];",
      "                arr[j+1] = temp;",
      "            }",
      "}"
    ],
    "C++": [
      "#include <iostream>",
      "using namespace std;",
      "",
      "void bubbleSort(int arr[], int n) {",
      "    for (int i = 0; i < n-1; i++)",
      "        for (int j = 0; j < n-i-1; j++)",
      "            if (arr[j] > arr[j+1]) {",
      "                swap(arr[j], arr[j+1]);",
      "            }",
      "}"
    ],
    "Java": [
      "public class BubbleSort {",
      "    void bubbleSort(int arr[]) {",
      "        int n = arr.length;",
      "        for (int i = 0; i < n-1; i++)",
      "            for (int j = 0; j < n-i-1; j++)",
      "                if (arr[j] > arr[j+1]) {",
      "                    int temp = arr[j];",
      "                    arr[j] = arr[j+1];",
      "                    arr[j+1] = temp;",
      "                }",
      "    }",
      "}"
    ],
    "Python": [
      "def bubbleSort(arr):",
      "    n = len(arr)",
      "    for i in range(n):",
      "        for j in range(0, n-i-1):",
      "            if arr[j] > arr[j+1]:",
      "                arr[j], arr[j+1] = arr[j+1], arr[j]"
    ],
    "C#": [
      "using System;",
      "",
      "class BubbleSort {",
      "    void Sort(int[] arr) {",
      "        int n = arr.Length;",
      "        for (int i = 0; i < n - 1; i++)",
      "            for (int j = 0; j < n - i - 1; j++)",
      "                if (arr[j] > arr[j + 1]) {",
      "                    int temp = arr[j];",
      "                    arr[j] = arr[j + 1];",
      "                    arr[j + 1] = temp;",
      "                }",
      "    }",
      "}"
    ],
    "Rust": [
      "fn bubble_sort(arr: &mut [i32]) {",
      "    let n = arr.len();",
      "    for i in 0..n {",
      "        for j in 0..n-i-1 {",
      "            if arr[j] > arr[j+1] {",
      "                arr.swap(j, j+1);",
      "            }",
      "        }",
      "    }",
      "}"
    ]
  },
  "SelectionSort": {
    "JavaScript": [
      "function selectionSort(arr) {",
      "    let n = arr.length;",
      "    for (let i = 0; i < n-1; i++) {",
      "        let min_idx = i;",
      "        for (let j = i+1; j < n; j++) {",
      "            if (arr[j] < arr[min_idx]) {",
      "                min_idx = j;",
      "            }",
      "        }",
      "        let temp = arr[min_idx];",
      "        arr[min_idx] = arr[i];",
      "        arr[i] = temp;",
      "    }",
      "    return arr;",
      "}"
    ],
    "C": [
      "#include <stdio.h>",
      "",
      "void selectionSort(int arr[], int n) {",
      "    int i, j, min_idx;",
      "    for (i = 0; i < n-1; i++) {",
      "        min_idx = i;",
      "        for (j = i+1; j < n; j++)",
      "            if (arr[j] < arr[min_idx])",
      "                min_idx = j;",
      "        int temp = arr[min_idx];",
      "        arr[min_idx] = arr[i];",
      "        arr[i] = temp;",
      "    }",
      "}"
    ],
    "C++": [
      "#include <iostream>",
      "using namespace std;",
      "",
      "void selectionSort(int arr[], int n) {",
      "    int i, j, min_idx;",
      "    for (i = 0; i < n-1; i++) {",
      "        min_idx = i;",
      "        for (j = i+1; j < n; j++)",
      "            if (arr[j] < arr[min_idx])",
      "                min_idx = j;",
      "        swap(arr[min_idx], arr[i]);",
      "    }",
      "}"
    ],
    "Java": [
      "public class SelectionSort {",
      "    void selectionSort(int arr[]) {",
      "        int n = arr.length;",
      "        for (int i = 0; i < n-1; i++) {",
      "            int min_idx = i;",
      "            for (int j = i+1; j < n; j++) {",
      "                if (arr[j] < arr[min_idx]) {",
      "                    min_idx = j;",
      "                }",
      "            }",
      "            int temp = arr[min_idx];",
      "            arr[min_idx] = arr[i];",
      "            arr[i] = temp;",
      "        }",
      "    }",
      "}"
    ],
    "Python": [
      "def selectionSort(arr):",
      "    n = len(arr)",
      "    for i in range(n-1):",
      "        min_idx = i",
      "        for j in range(i+1, n):",
      "            if arr[j] < arr[min_idx]:",
      "                min_idx = j",
      "        arr[i], arr[min_idx] = arr[min_idx], arr[i]"
    ],
    "C#": [
      "using System;",
      "",
      "class SelectionSort {",
      "    void Sort(int[] arr) {",
      "        int n = arr.Length;",
      "        for (int i = 0; i < n-1; i++) {",
      "            int min_idx = i;",
      "            for (int j = i+1; j < n; j++) {",
      "                if (arr[j] < arr[min_idx]) {",
      "                    min_idx = j;",
      "                }",
      "            }",
      "            int temp = arr[min_idx];",
      "            arr[min_idx] = arr[i];",
      "            arr[i] = temp;",
      "        }",
      "    }",
      "}"
    ],
    "Rust": [
      "fn selection_sort(arr: &mut [i32]) {",
      "    let n = arr.len();",
      "    for i in 0..n-1 {",
      "        let mut min_idx = i;",
      "        for j in i+1..n {",
      "            if arr[j] < arr[min_idx] {",
      "                min_idx = j;",
      "            }",
      "        }",
      "        arr.swap(i, min_idx);",
      "    }",
      "}"
    ]
  },
  "InsertionSort": {
    "JavaScript": [
      "function insertionSort(arr) {",
      "    let n = arr.length;",
      "    for (let i = 1; i < n; ++i) {",
      "        let key = arr[i];",
      "        let j = i - 1;",
      "        while (j >= 0 && arr[j] > key) {",
      "            arr[j + 1] = arr[j];",
      "            j = j - 1;",
      "        }",
      "        arr[j + 1] = key;",
      "    }",
      "    return arr;",
      "}"
    ],
    "C": [
      "#include <stdio.h>",
      "",
      "void insertionSort(int arr[], int n) {",
      "    int i, key, j;",
      "    for (i = 1; i < n; i++) {",
      "        key = arr[i];",
      "        j = i - 1;",
      "        while (j >= 0 && arr[j] > key) {",
      "            arr[j + 1] = arr[j];",
      "            j = j - 1;",
      "        }",
      "        arr[j + 1] = key;",
      "    }",
      "}"
    ],
    "C++": [
      "#include <iostream>",
      "using namespace std;",
      "",
      "void insertionSort(int arr[], int n) {",
      "    int i, key, j;",
      "    for (i = 1; i < n; i++) {",
      "        key = arr[i];",
      "        j = i - 1;",
      "        while (j >= 0 && arr[j] > key) {",
      "            arr[j + 1] = arr[j];",
      "            j = j - 1;",
      "        }",
      "        arr[j + 1] = key;",
      "    }",
      "}"
    ],
    "Java": [
      "public class InsertionSort {",
      "    void insertionSort(int arr[]) {",
      "        int n = arr.length;",
      "        for (int i = 1; i < n; ++i) {",
      "            int key = arr[i];",
      "            int j = i - 1;",
      "            while (j >= 0 && arr[j] > key) {",
      "                arr[j + 1] = arr[j];",
      "                j = j - 1;",
      "            }",
      "            arr[j + 1] = key;",
      "        }",
      "    }",
      "}"
    ],
    "Python": [
      "def insertionSort(arr):",
      "    for i in range(1, len(arr)):",
      "        key = arr[i]",
      "        j = i - 1",
      "        while j >= 0 and key < arr[j]:",
      "            arr[j + 1] = arr[j]",
      "            j -= 1",
      "        arr[j + 1] = key"
    ],
    "C#": [
      "using System;",
      "",
      "class InsertionSort {",
      "    void Sort(int[] arr) {",
      "        int n = arr.Length;",
      "        for (int i = 1; i < n; ++i) {",
      "            int key = arr[i];",
      "            int j = i - 1;",
      "            while (j >= 0 && arr[j] > key) {",
      "                arr[j + 1] = arr[j];",
      "                j = j - 1;",
      "            }",
      "            arr[j + 1] = key;",
      "        }",
      "    }",
      "}"
    ],
    "Rust": [
      "fn insertion_sort(arr: &mut [i32]) {",
      "    for i in 1..arr.len() {",
      "        let mut j = i;",
      "        while j > 0 && arr[j - 1] > arr[j] {",
      "            arr.swap(j - 1, j);",
      "            j -= 1;",
      "        }",
      "    }",
      "}"
    ]
  }
}
